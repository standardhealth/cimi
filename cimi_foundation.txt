Grammar:		DataElement 5.0
Namespace:		cimi.foundation
Description:	"The Foundation Package contains the base classes from which all CIMI classes are derived. Foundation classes have been harmonized with the ISO 13606 EHR Specification. Its three core components are (1) COMPOSITION (used to represent clinical documents or knowledge artifacts), (2) ENTRY used to represent clinical statement content, and (3) CLUSTER (used to represent supporting data structures)."
Uses:			cimi.datatypes, cimi.core

Abstract Element:	CLUSTER
Based on:			LOCATABLE
Concept:			TBD
Description:		"Abstract class representing a reusable structure in a model such as an address or an entity such as a device."
/* BALLOT: The CIMI class hierarchy, as a whole, doesn't look right to me. The top-level classes in the Foundation module relate to each other in a very different way than the lower-level classes. At the top, things are divided according to their structural characteristics - CLUSTER, COMPOSITION, CONTENT. Further down, things are divided using a more conventional type-of relationship (e.g, Encounter has subtypes EmergencyEncounter, InPatientEncounter, LongTermCare). This leads to having two classification systems competing within one hierarchy. When this occurs, things that are conceptually related but structurally unrelated can end up far apart in the hierarchy, but things that are structurally related but conceptually unrelated are closer together. For example, Person is an Entity (a CLUSTER), but as such, it cannot be CONTENT. So, you can't have an ENTRY about an Entity, such as a Person...which seems strange. To be consistent, taxonomies must have ONE organizing principle. 

In the CIMI class hierarchy, there is also an element of functional classification (along with organization by data structure and domain meaning). StatementTopic refers the function of a thing -- i.e., can that thing function as a topic of a clinical statement? The trouble is, things on different branches of the hierarchy could be statement topics. For example, Entities (devices, organizations, people) could be statement topics. But Entity is not a child of StatementTopic. ClinicalStatement could also be valid statement topic, but a ClinicalStatement is under Entry and CONTENT, not CLUSTER, where StatementTopic is located. CIMI's class hierarchy cannot serve three organizing priniciples simultaneously. The practical implication is you really don't know where to put something new, e.g., a hospital ward. Could hospital ward be a valid StatementTopic? Sure...if there were MRSA found on that ward. Is a ward an Entity? Certainty. Is it a COMPOSITION of hospital rooms? Absolutely. 

So what to do? A more tractable question is: what data do we need to collect about a thing? Going down that path, the focus shifts from deciding on a class hierarchy, to data elements and how they combine into groups of data elements (CLUSTERS), and upward into CLUSTERS of CLUSTERS. Define reusable data elements, and build them up hierarchically to the logical structures you need to represent. Not so different than FHIR, and not so different from CIMI. 
*/

Abstract Element:	BASEENTITY
Based on:			CLUSTER
Concept:			TBD
Description:		"Parent class for all entities."

Abstract Element:	COMPOSITION
Based on:			LOCATABLE
Concept:			TBD
Description:		"A composition is considered the unit of modification of the record, the unit of transmission in record extracts, and the unit of attestation by authorising clinicians. In this latter sense, it may be considered equivalent to a signed document."
0..*				CONTENT
// BALLOT: Creating a list to hold the contents of a COMPOSITION means that the list will have to be sliced in order to define the particular contents of a composition. This is contrary to the architectural principles of CIMI. A composition should be created by adding elements to children in the BMM and not inserting them into a sliced list.
// BALLOT: COMPOSITION is abstract, and doesn't have any children (not even CompositeComponent inherits from it). Is it necessary? If not, can it be removed?

Abstract Element:	CONTENT
Based on:			LOCATABLE
Concept:			TBD
Description:		"Abstract ancestor of all concrete content types. A unit of content that makes up a composition - e.g., a clinical statement in a patient record, a simple or composite action is a knowledge document."


Abstract Element:	ENTRY
Based on:			CONTENT
Concept:			TBD
Description:		"An ENTRY is the root of a logical item of hard clinical information created in the clinical statement context, within a clinical session or of clinical knowledge in a knowledge artifact. With regards to clinical information entries, there can be numerous such contexts in a clinical session. Observations and other Entry types only ever document information captured&#47;created in the event documented by the enclosing Composition. An ENTRY is also the minimal unit of information any query should return, since a whole ENTRY (including subparts) records spatial structure, timing information, and contextual information, as well as the subject and generator of the information."

Abstract Element:	SECTION
Based on:			CONTENT
Concept:			TBD
Description:		"Represents a heading in a heading structure, or section tree . Can also be used to represent a collection of entries without metadata. (For collections of entries with shared metadata, use COMPOUND _ENTRY instead). Created according to archetyped structures for typical headings such as SOAP, physical examination, but also pathology result heading structures. Should not be used instead of ENTRY hierarchical structures."
0..*				CONTENT
// BALLOT: Creating a list to hold the contents of a SECTION means that the list will have to be sliced in order to define the particular contents of a section. This is against the architectural principles of CIMI. The content of a section should be added as subelements in a new child class, and not inserted into a sliced list.

Abstract Element:	VIRTUALCLUSTER
Based on:			CLUSTER
Concept:			TBD
Description:		"A dependent model structure designed to support attribute reuse but which may be ignored by tooling such as code generators. This allows grouping of attributes to be used in a number of compositional structures in order to encourage pattern reuse and consistency but which can be structurally flattened in a derived artifact (e.g., a java class representing the composition). An example of this pattern is the CIMI Clinical Statement pattern which combines statement context and topic to build the set of relevant clinical statements."

Abstract Element:	PARTICIPATION
Based on:			ASSOCIATIONCLASS
Concept:			TBD	
Description:		"Model of a participation of a Party (any Actor or Role) in an activity. Used to represent any participation of a Party in some activity, which is not explicitly in the model, e.g. assisting nurse. Can be used to record past or future participations. Should not be used in place of more permanent relationships between demographic entities."
1..1				PARTY
// BALLOT: In the definition of PARTICIPATION, either use party (lower case) if using the English language word, or PARTY, if citing the class, but not Party.

Abstract Element:	PARTY
Based on:			LOCATABLE
Concept:			TBD
Description:		"A party involved in an activity. PARTY has two specializations: ACTOR and ROLE."
1..1				Type
0..*				PARTYRELATIONSHIP
0..*				Identifier
// BALLOT: Definition of PARTY is circular. Additionally, the definition of PARTY should be self-contained, not defined in terms of its subclasses. 
// BALLOT: Having LOCATABLE as the parent class of PARTY implies that PARTY is neither a CLUSTER, COMPOSITION, nor CONTENT. I don't think this is correct. PARTY, being a non-structural class, should not be at the same level of the other three high-level children of LOCATABLE that each describe a different structural characteristic of data (CLUSTER, COMPOSITION, CONTENT) 

Element:			PARTYRELATIONSHIP
Based on:			ASSOCIATIONCLASS
Concept:			TBD
Description:		"Association class relating two parties such as the association of an actor with one or more roles."
1..1				PARTY
// BALLOT: The definition of PARTY_RELATONSHIP is circular
// BALLOT: It is odd that PARTYRELATIONSHIP (and ASSOCIATIONCLASS, for that matter) does not involve two parties. A relationship, by nature, connects two things.
// BALLOT: PARTYRELATIONSHIP should have a reference to the second party, rather than an attribute that is that party. CIMI never seems to differentiate. Is that a problem? Presumably, the two parties involved in the relationship refer to eachother through the PARTYRELATIONSHIP, instead of being together in the same structure.

