Grammar:		DataElement 5.0
Namespace:		cimi.foundation
Description:	"The Foundation Package contains the base classes from which all CIMI classes are derived. Foundation classes have been harmonized with the ISO 13606 EHR Specification. Its three core components are (1) COMPOSITION (used to represent clinical documents or knowledge artifacts), (2) ENTRY used to represent clinical statement content, and (3) CLUSTER (used to represent supporting data structures)."
Uses:			cimi.datatypes, cimi.core

/* BALLOT: The CIMI class hierarchy, as a whole, doesn't look right to me. The top-level classes (in the Foundation module) relate to each other in a very different way than the lower-level classes. At the top, things are divided according to their structural characteristics - CLUSTER, COMPOSITION, CONTENT. In the middle, there is a functional classification, based on whether classes can function as Statements, Topics, or Contexts. At the bottom, the hierarchy branches out using conventional type-of relationship (e.g, Encounter has subtypes EmergencyEncounter, InPatientEncounter, LongTermCare). It looks confused because there are three simultaneous organizing priniciples. 

On a practical level, this leads to two problems: (1) How do we, or any future user, decide where to put new items? Take an insulin pump. It is an Entity, it could be a StatementTopic, and it is also, in some sense, an ACTOR. These are three completely disjoint branches of the CIMI hierarchy. (2) The class hierarchy overly limits the type of functions that objects can play. It is impossible to have an ENTRY whose topic is an Entity, which is odd. Nor can you make a ClinicalStatement a topic of an ENTRY. I noticed the model classifies ClinicalStudyAdverseFinding as an Entry, not a Finding, possibly because it had to be a type of ReportableEventEntry. 

SNOMED makes it clear that one thing can simultaneously belong to more than one hierarchy. If we admit that the same thing is true in the model (that a smart device can simultaneously be an entity, a topic, and an actor), then one fix is multiple inheritance. But this introduces even more complications. It is not a simplification. We have already rejected it, for good reason.

You might not agree the class hierarchy needs fixing, but you probably agree that it could be simplified. My suggestion to fully embrace two concepts: CLUSTER and semantic identification. Structurally, it is perfectly fine to make everything a CLUSTER, from top to bottom. CLUSTERs, you recall, are reusable structures, such as addresses, specimens, and dosage instructions. The trick is to make EVERYTHING a reusable cluster, from the smallest data element up to the most complex panel or report. When we do that, we can build the things we need out of successively composited clusters. It's not a new idea. 

The second critical element is semantic identification. That's the idea that every cluster has a semantic identifier, so its meaning is clearly defined and can be linked to outside ontologies. We already do that for terminology. This is just applying that same idea to every model object. This takes the pressure off the internal class structure to be the ultimate determiner of what is what, and allows someone to classify things in purpose-specific ways. For someone interested in contact dermatitis, that same insulin pump could be classified under "wearable objects with silicone coating". Semantic identification is not a new idea, either. 

This makes everything much simpler. And there are added benefits: consistency and reuse. By reusing clusters down to the attribute level, the model gets smaller and the number of different things goes down dramatically. For example, CIMI separately defines registeringOrganization, accreditingOrganization, and issuingInstitution. They have different datatypes (one is a HealthCareProviderRelationship, two are TEXTs, and ironically, none are Organizations) While not identical, they are semantically close. Perhaps a single data element could to the same job.
*/


Abstract Element:	CLUSTER
Based on:			LOCATABLE
Concept:			TBD
Description:		"Abstract class representing a reusable structure in a model such as an address or an entity such as a device."

Abstract Element:	BASEENTITY
Based on:			CLUSTER
Concept:			TBD
Description:		"Parent class for all entities."

Abstract Element:	COMPOSITION
Based on:			LOCATABLE
Concept:			TBD
Description:		"A composition is considered the unit of modification of the record, the unit of transmission in record extracts, and the unit of attestation by authorising clinicians. In this latter sense, it may be considered equivalent to a signed document."
0..*				CONTENT
// BALLOT: Creating a list to hold the contents of a COMPOSITION means that the list will have to be sliced in order to define the particular contents of a composition. This is contrary to the architectural principles of CIMI. A composition should be created by adding elements to children in the BMM and not inserting them into a sliced list.
// BALLOT: COMPOSITION is abstract, and doesn't have any children (not even CompositeComponent inherits from it). Is it necessary? If not, can it be removed?

Abstract Element:	CONTENT
Based on:			LOCATABLE
Concept:			TBD
Description:		"Abstract ancestor of all concrete content types. A unit of content that makes up a composition - e.g., a clinical statement in a patient record, a simple or composite action is a knowledge document."


Abstract Element:	ENTRY
Based on:			CONTENT
Concept:			TBD
Description:		"An ENTRY is the root of a logical item of hard clinical information created in the clinical statement context, within a clinical session or of clinical knowledge in a knowledge artifact. With regards to clinical information entries, there can be numerous such contexts in a clinical session. Observations and other Entry types only ever document information captured&#47;created in the event documented by the enclosing Composition. An ENTRY is also the minimal unit of information any query should return, since a whole ENTRY (including subparts) records spatial structure, timing information, and contextual information, as well as the subject and generator of the information."

Abstract Element:	SECTION
Based on:			CONTENT
Concept:			TBD
Description:		"Represents a heading in a heading structure, or section tree . Can also be used to represent a collection of entries without metadata. (For collections of entries with shared metadata, use COMPOUND _ENTRY instead). Created according to archetyped structures for typical headings such as SOAP, physical examination, but also pathology result heading structures. Should not be used instead of ENTRY hierarchical structures."
0..*				CONTENT
// BALLOT: Creating a list to hold the contents of a SECTION means that the list will have to be sliced in order to define the particular contents of a section. This is against the architectural principles of CIMI. The content of a section should be added as subelements in a new child class, and not inserted into a sliced list.

Abstract Element:	VIRTUALCLUSTER
Based on:			CLUSTER
Concept:			TBD
Description:		"A dependent model structure designed to support attribute reuse but which may be ignored by tooling such as code generators. This allows grouping of attributes to be used in a number of compositional structures in order to encourage pattern reuse and consistency but which can be structurally flattened in a derived artifact (e.g., a java class representing the composition). An example of this pattern is the CIMI Clinical Statement pattern which combines statement context and topic to build the set of relevant clinical statements."

Abstract Element:	PARTICIPATION
Based on:			ASSOCIATIONCLASS
Concept:			TBD	
Description:		"Model of a participation of a Party (any Actor or Role) in an activity. Used to represent any participation of a Party in some activity, which is not explicitly in the model, e.g. assisting nurse. Can be used to record past or future participations. Should not be used in place of more permanent relationships between demographic entities."
1..1				PARTY
// BALLOT: In the definition of PARTICIPATION, either use party (lower case) if using the English language word, or PARTY, if citing the class, but not Party.

Abstract Element:	PARTY
Based on:			LOCATABLE
Concept:			TBD
Description:		"A party involved in an activity. PARTY has two specializations: ACTOR and ROLE."
1..1				Type
0..*				PARTYRELATIONSHIP
0..*				Identifier
// BALLOT: Definition of PARTY is circular. Additionally, the definition of PARTY should be self-contained, not defined in terms of its subclasses. 
// BALLOT: Having LOCATABLE as the parent class of PARTY implies that PARTY is neither a CLUSTER, COMPOSITION, nor CONTENT. I don't think this is correct. PARTY, being a non-structural class, should not be at the same level of the other three high-level children of LOCATABLE that each describe a different structural characteristic of data (CLUSTER, COMPOSITION, CONTENT) 

Element:			PARTYRELATIONSHIP
Based on:			ASSOCIATIONCLASS
Concept:			TBD
Description:		"Association class relating two parties such as the association of an actor with one or more roles."
//1..1				ref(PARTY)
// DELTA: Changed to PARTYRELATIONSHIP.PARTY to ref(PARTY)
// BALLOT: The definition of PARTY_RELATONSHIP is circular
// BALLOT: It is odd that PARTYRELATIONSHIP (and ASSOCIATIONCLASS, for that matter) does not involve two parties. A relationship, by nature, connects two things.
// BALLOT: PARTYRELATIONSHIP should have a reference to the second party, rather than an attribute that is that party. CIMI never seems to differentiate. Is that a problem? Presumably, the two parties involved in the relationship refer to eachother through the PARTYRELATIONSHIP, instead of being together in the same structure.

Element:			BASEACTOR
Based on:			PARTY
Concept:			TBD
Description:		"An entity acting as an actor assuming a role in a participation. For instance, a person may act as a provider in an encounter with a patient."
1..1				Actor

Element:			Actor
Concept:			TBD
Description:		"Entity involved in an activity. Typically a specific person or organization."
Value:				BASEENTITY

// BALLOT: BASE_ACTOR and Actor seems to be vestigial. BASE_ACTOR has no children, and Actor is type BASE_ENTITY. I don't recall seeing these classes being used anywhere.

Element:			BASEROLE
Based on:			PARTY
Concept:			TBD
Description:		"Capacity in which an actor is involved in an activity. For instance, 'attending physician'."